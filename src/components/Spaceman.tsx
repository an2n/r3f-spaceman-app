/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 spaceman.glb --types --shadows --transform 
Files: spaceman.glb [6.82MB] > /code/space-app/public/spaceman-transformed.glb [3.06MB] (55%)
*/

import * as THREE from "three";
import React, { useEffect, useRef } from "react";
import { useGraph } from "@react-three/fiber";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF, SkeletonUtils } from "three-stdlib";
import { useControls } from "leva";

type ActionName =
  | "backward"
  | "dance"
  | "flip"
  | "happy"
  | "phone"
  | "suffle" // Should rename this to "shuffle"
  | "twerk"
  | "walking";

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    avaturn_body: THREE.SkinnedMesh;
    avaturn_glasses_0: THREE.SkinnedMesh;
    avaturn_glasses_1: THREE.SkinnedMesh;
    avaturn_hair_0: THREE.SkinnedMesh;
    avaturn_hair_1: THREE.SkinnedMesh;
    avaturn_look_0: THREE.SkinnedMesh;
    avaturn_shoes_0: THREE.SkinnedMesh;
    Hips: THREE.Bone;
  };
  materials: {
    avaturn_body_material: THREE.MeshStandardMaterial;
    avaturn_glasses_0_material: THREE.MeshStandardMaterial;
    avaturn_glasses_1_material: THREE.MeshStandardMaterial;
    avaturn_hair_0_material: THREE.MeshStandardMaterial;
    avaturn_hair_1_material: THREE.MeshStandardMaterial;
    avaturn_look_0_material: THREE.MeshStandardMaterial;
    avaturn_shoes_0_material: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

export function Spaceman(props: JSX.IntrinsicElements["group"]) {
  useControls("spaceman", {
    animation: {
      value: "walking" satisfies ActionName,
      options: [
        "backward",
        "dance",
        "flip",
        "happy",
        "phone",
        "suffle",
        "twerk",
        "walking",
      ] satisfies ActionName[],
      onChange: (value) => switchAnimation(value),
    },
  });

  const group = useRef<THREE.Group>(null);
  const isPlayingRef = useRef(false);
  const activeActionRef = useRef<THREE.AnimationAction | null>(null);

  const { scene, animations } = useGLTF(
    "/assets/spaceman-transformed.glb"
  ) as GLTFResult;
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as GLTFResult;
  const { actions } = useAnimations(animations, group);

  // Start walking animation by default
  useEffect(() => {
    const walk = actions.walking;
    if (walk) {
      walk.reset().play();
      activeActionRef.current = walk;
    }
  }, [actions]);

  const switchAnimation = (animationName: ActionName) => {
    if (isPlayingRef.current || !actions[animationName]) {
      return;
    }

    const current = actions[animationName]!;
    const previous = activeActionRef.current;

    if (previous) {
      current.reset().play();
      current.crossFadeFrom(previous, 1, false);
    } else {
      current.reset().play();
    }
    activeActionRef.current = current;
  };

  const handleClick = async () => {
    const walk = actions.walking;
    const happy = actions.happy;

    if (!walk || !happy || isPlayingRef.current) {
      return;
    }

    isPlayingRef.current = true;

    // Cross-fade from walking to happy
    happy.reset().play();
    happy.crossFadeFrom(activeActionRef.current!, 0.5, false);
    activeActionRef.current = happy;

    // Wait for happy to complete
    const duration = happy.getClip().duration;
    await new Promise((resolve) => setTimeout(resolve, duration * 3000));

    // Cross-fade back to walking
    walk.reset().play();
    walk.crossFadeFrom(happy, 0.5, false);
    activeActionRef.current = walk;
    isPlayingRef.current = false;
  };

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      scale={0.08}
      onClick={handleClick}
    >
      <group name="Scene">
        <group name="Avatar">
          <primitive object={nodes.Hips} />
          <skinnedMesh
            name="avaturn_body"
            geometry={nodes.avaturn_body.geometry}
            material={materials.avaturn_body_material}
            skeleton={nodes.avaturn_body.skeleton}
            castShadow
          />
          <skinnedMesh
            name="avaturn_glasses_0"
            geometry={nodes.avaturn_glasses_0.geometry}
            material={materials.avaturn_glasses_0_material}
            skeleton={nodes.avaturn_glasses_0.skeleton}
            castShadow
          />
          <skinnedMesh
            name="avaturn_glasses_1"
            geometry={nodes.avaturn_glasses_1.geometry}
            material={materials.avaturn_glasses_1_material}
            skeleton={nodes.avaturn_glasses_1.skeleton}
            castShadow
          />
          <skinnedMesh
            name="avaturn_hair_0"
            geometry={nodes.avaturn_hair_0.geometry}
            material={materials.avaturn_hair_0_material}
            skeleton={nodes.avaturn_hair_0.skeleton}
            castShadow
          />
          <skinnedMesh
            name="avaturn_hair_1"
            geometry={nodes.avaturn_hair_1.geometry}
            material={materials.avaturn_hair_1_material}
            skeleton={nodes.avaturn_hair_1.skeleton}
            castShadow
          />
          <skinnedMesh
            name="avaturn_look_0"
            geometry={nodes.avaturn_look_0.geometry}
            material={materials.avaturn_look_0_material}
            skeleton={nodes.avaturn_look_0.skeleton}
            castShadow
          />
          <skinnedMesh
            name="avaturn_shoes_0"
            geometry={nodes.avaturn_shoes_0.geometry}
            material={materials.avaturn_shoes_0_material}
            skeleton={nodes.avaturn_shoes_0.skeleton}
            castShadow
          />
        </group>
      </group>
    </group>
  );
}
useGLTF.preload("/assets/spaceman-transformed.glb");
